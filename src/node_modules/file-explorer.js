module.exports = fileexplorer

const style = document.createElement('style')
style.textContent = `
.list              {
  display          : flex;
  flex-direction   : column;
  font-family      : monospace;
  padding          : 5px;
  box-sizing       : border-box;
  background-color : black;
  border           : 5px solid white;
  color            : lime;
  white-space      : pre;
  margin           : 5px;
  overflow         : auto;
  flex-grow        : 1;
}
.item:hover        {
  background-color : lime;
  color            : black;
}
.item              {
  width            : 100%;
  cursor           : pointer;
}`
document.head.appendChild(style)

function fileexplorer (fs) {
  const list = document.createElement('div')
  list.className = 'list'
  list.innerHTML = '<div class="item" data-path="/" data-type="folder">▶ /</div>'
  list.onmousedown = async event => {
    const { currentTarget, target } = event
    if (target.className !== 'item') return
    if (target.dataset.type === 'file') return
    const next = target.next
    if (next) {
      target.textContent = target.textContent.replace('◢', '▶')
      while (target.nextElementSibling && target.nextElementSibling !== next) {
        target.nextElementSibling.remove()
      }
      target.next = void 0
    } else {
      target.next = target.nextElementSibling || target.parentElement
      expand(target)
    }

    async function expand (target) {
      const [prefix, name] = target.textContent.split('▶')
      const indent = prefix.length
      target.textContent = [prefix, name].join('◢')
      const path = target.dataset.path
      const items = await fs.get(path)
      const df = document.createDocumentFragment()
      for (var i = 0, len = items.length; i < len; i++) {
        const item = document.createElement('div')
        item.className = 'item'
        const { type, name } = items[i]
        item.dataset.path = `${path}/${name}`
        const isFolder = type === 'folder'
        item.textContent = `${' '.repeat(indent)}  ${
           isFolder ? `▶ ${name}/` : name
        }`
        item.dataset.type = isFolder ? 'folder' : 'file'
        df.append(item)
      }
      target.after(df)
    }
    // @TODO:
    // 0. show difference between FILES and FOLDERS
    // 1. make EXPAND and COLLAPSE possible through API
    // 2. make file explorer navigatable through API
    //    * take inspiration from dat-archive-web API 
    // 3. make it so it receives messages rather than calls
    // 4. create a little wrapper to trigger methods to emit msgs
    // 5. ...
    // 6. hard code test scenario to start MOUNTED and EXPANDED

  }
  const api = { expand }
  return { el: list, api }
  async function expand (path) {
    const keys = await fs.get(path)
    for (var i = 0, len1 = keys.length; i < len1; i++) {
      const container = document.createElement('div')
      container.textContent = keys[i]
      list.append(container)
      const lines = paths[keys[i]]
    }
  }
}